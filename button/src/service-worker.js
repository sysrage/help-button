/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Automatically update to new service worker when available
self.addEventListener('install', (event) => {
  event.waitUntil(self.skipWaiting());
});

// Refresh all client windows when new service worker is installed
self.addEventListener('activate', async (event) => {
  event.waitUntil(self.clients.claim());
  const tabs = await self.clients.matchAll({ type: 'window' });
  for (const tab of tabs) {
    tab.navigate(tab.url);
  }
});

// Any other custom service worker logic can go here.
let getVersionPort;
let count = 0;
self.addEventListener("message", async (event) => {
  if (event.data && event.data.type === 'INIT_PORT') {
    getVersionPort = event.ports[0];
  }

  // Load counter
  if (event.data && event.data.type === 'INCREASE_COUNT') {
    getVersionPort.postMessage({ payload: ++count });
  }

  if (event.data && event.data.type === 'SERVICE_WORKER_TEST') {
    self.registration.showNotification('Help Button Notification', {
      body: 'Test notification.',
      icon: '/logo512.png',
    });
  }

  // Push Notifications
  if (event.data && event.data.type === 'ENABLE_PUSH') {
    self.registration.showNotification('Help Button Notification', {
      body: 'Push notifications have been enabled for the Help Button.',
      icon: '/logo512.png',
    });
  }

});

self.addEventListener("push", (event) => {
  const { title, options } = event.data.json();
  console.log(`New Push event -- Title: ${title} | Options: ${JSON.stringify(options)}`);
  self.registration.showNotification(title, options);
});

self.addEventListener('notificationclick', (event) => {
  console.log('event.notification', event.notification);
});
